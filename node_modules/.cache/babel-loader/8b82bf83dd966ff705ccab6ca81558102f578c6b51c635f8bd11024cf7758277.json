{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletProvider = void 0;\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst error_1 = require(\"./core/error\");\nconst serialize_1 = require(\"./core/error/serialize\");\nconst type_1 = require(\"./core/type\");\nconst util_1 = require(\"./core/type/util\");\nconst util_2 = require(\"./sign/util\");\nconst provider_1 = require(\"./util/provider\");\nconst Communicator_1 = require(\"./core/communicator/Communicator\");\nconst method_1 = require(\"./core/provider/method\");\nconst ScopedLocalStorage_1 = require(\"./util/ScopedLocalStorage\");\nclass CoinbaseWalletProvider extends eventemitter3_1.default {\n  constructor(_a) {\n    var _b, _c;\n    var {\n        metadata\n      } = _a,\n      _d = _a.preference,\n      {\n        keysUrl\n      } = _d,\n      preference = __rest(_d, [\"keysUrl\"]);\n    super();\n    this.accounts = [];\n    this.handlers = {\n      // eth_requestAccounts\n      handshake: async _ => {\n        try {\n          if (this.connected) {\n            this.emit('connect', {\n              chainId: (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id))\n            });\n            return this.accounts;\n          }\n          const signerType = await this.requestSignerSelection();\n          const signer = this.initSigner(signerType);\n          const accounts = await signer.handshake();\n          this.signer = signer;\n          (0, util_2.storeSignerType)(signerType);\n          this.emit('connect', {\n            chainId: (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id))\n          });\n          return accounts;\n        } catch (error) {\n          this.handleUnauthorizedError(error);\n          throw error;\n        }\n      },\n      sign: async request => {\n        if (!this.connected || !this.signer) {\n          throw error_1.standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n        }\n        try {\n          return await this.signer.request(request);\n        } catch (error) {\n          this.handleUnauthorizedError(error);\n          throw error;\n        }\n      },\n      fetch: request => (0, provider_1.fetchRPCRequest)(request, this.chain),\n      state: request => {\n        const getConnectedAccounts = () => {\n          if (this.connected) return this.accounts;\n          throw error_1.standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n        };\n        switch (request.method) {\n          case 'eth_chainId':\n            return (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id));\n          case 'net_version':\n            return this.chain.id;\n          case 'eth_accounts':\n            return getConnectedAccounts();\n          case 'eth_coinbase':\n            return getConnectedAccounts()[0];\n          default:\n            return this.handlers.unsupported(request);\n        }\n      },\n      deprecated: _ref => {\n        let {\n          method\n        } = _ref;\n        throw error_1.standardErrors.rpc.methodNotSupported(\"Method \".concat(method, \" is deprecated.\"));\n      },\n      unsupported: _ref2 => {\n        let {\n          method\n        } = _ref2;\n        throw error_1.standardErrors.rpc.methodNotSupported(\"Method \".concat(method, \" is not supported.\"));\n      }\n    };\n    this.isCoinbaseWallet = true;\n    this.updateListener = {\n      onAccountsUpdate: _ref3 => {\n        let {\n          accounts,\n          source\n        } = _ref3;\n        if ((0, util_1.areAddressArraysEqual)(this.accounts, accounts)) return;\n        this.accounts = accounts;\n        if (source === 'storage') return;\n        this.emit('accountsChanged', this.accounts);\n      },\n      onChainUpdate: _ref4 => {\n        let {\n          chain,\n          source\n        } = _ref4;\n        if (chain.id === this.chain.id && chain.rpcUrl === this.chain.rpcUrl) return;\n        this.chain = chain;\n        if (source === 'storage') return;\n        this.emit('chainChanged', (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(chain.id)));\n      }\n    };\n    this.metadata = metadata;\n    this.preference = preference;\n    this.communicator = new Communicator_1.Communicator(keysUrl);\n    this.chain = {\n      id: (_c = (_b = metadata.appChainIds) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : 1\n    };\n    // Load states from storage\n    const signerType = (0, util_2.loadSignerType)();\n    this.signer = signerType ? this.initSigner(signerType) : null;\n  }\n  get connected() {\n    return this.accounts.length > 0;\n  }\n  async request(args) {\n    var _a;\n    try {\n      const invalidArgsError = (0, provider_1.checkErrorForInvalidRequestArgs)(args);\n      if (invalidArgsError) throw invalidArgsError;\n      // unrecognized methods are treated as fetch requests\n      const category = (_a = (0, method_1.determineMethodCategory)(args.method)) !== null && _a !== void 0 ? _a : 'fetch';\n      return this.handlers[category](args);\n    } catch (error) {\n      return Promise.reject((0, serialize_1.serializeError)(error, args.method));\n    }\n  }\n  handleUnauthorizedError(error) {\n    const e = error;\n    if (e.code === error_1.standardErrorCodes.provider.unauthorized) this.disconnect();\n  }\n  /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n  async enable() {\n    console.warn(\".enable() has been deprecated. Please use .request({ method: \\\"eth_requestAccounts\\\" }) instead.\");\n    return await this.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n  async disconnect() {\n    this.accounts = [];\n    this.chain = {\n      id: 1\n    };\n    ScopedLocalStorage_1.ScopedLocalStorage.clearAll();\n    this.emit('disconnect', error_1.standardErrors.provider.disconnected('User initiated disconnection'));\n  }\n  requestSignerSelection() {\n    return (0, util_2.fetchSignerType)({\n      communicator: this.communicator,\n      preference: this.preference,\n      metadata: this.metadata\n    });\n  }\n  initSigner(signerType) {\n    return (0, util_2.createSigner)({\n      signerType,\n      metadata: this.metadata,\n      communicator: this.communicator,\n      updateListener: this.updateListener\n    });\n  }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;","map":{"version":3,"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__importDefault","mod","__esModule","defineProperty","exports","value","CoinbaseWalletProvider","eventemitter3_1","require","error_1","serialize_1","type_1","util_1","util_2","provider_1","Communicator_1","method_1","ScopedLocalStorage_1","default","constructor","_a","_b","_c","metadata","_d","preference","keysUrl","accounts","handlers","handshake","_","connected","emit","chainId","hexStringFromIntNumber","IntNumber","chain","id","signerType","requestSignerSelection","signer","initSigner","storeSignerType","error","handleUnauthorizedError","sign","request","standardErrors","provider","unauthorized","fetch","fetchRPCRequest","state","getConnectedAccounts","method","unsupported","deprecated","_ref","rpc","methodNotSupported","concat","_ref2","isCoinbaseWallet","updateListener","onAccountsUpdate","_ref3","source","areAddressArraysEqual","onChainUpdate","_ref4","rpcUrl","communicator","Communicator","appChainIds","loadSignerType","args","invalidArgsError","checkErrorForInvalidRequestArgs","category","determineMethodCategory","Promise","reject","serializeError","code","standardErrorCodes","disconnect","enable","console","warn","ScopedLocalStorage","clearAll","disconnected","fetchSignerType","createSigner"],"sources":["/Users/shardingdog/billingdog/node_modules/@coinbase/wallet-sdk/dist/CoinbaseWalletProvider.js"],"sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletProvider = void 0;\nconst eventemitter3_1 = __importDefault(require(\"eventemitter3\"));\nconst error_1 = require(\"./core/error\");\nconst serialize_1 = require(\"./core/error/serialize\");\nconst type_1 = require(\"./core/type\");\nconst util_1 = require(\"./core/type/util\");\nconst util_2 = require(\"./sign/util\");\nconst provider_1 = require(\"./util/provider\");\nconst Communicator_1 = require(\"./core/communicator/Communicator\");\nconst method_1 = require(\"./core/provider/method\");\nconst ScopedLocalStorage_1 = require(\"./util/ScopedLocalStorage\");\nclass CoinbaseWalletProvider extends eventemitter3_1.default {\n    constructor(_a) {\n        var _b, _c;\n        var { metadata } = _a, _d = _a.preference, { keysUrl } = _d, preference = __rest(_d, [\"keysUrl\"]);\n        super();\n        this.accounts = [];\n        this.handlers = {\n            // eth_requestAccounts\n            handshake: async (_) => {\n                try {\n                    if (this.connected) {\n                        this.emit('connect', { chainId: (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id)) });\n                        return this.accounts;\n                    }\n                    const signerType = await this.requestSignerSelection();\n                    const signer = this.initSigner(signerType);\n                    const accounts = await signer.handshake();\n                    this.signer = signer;\n                    (0, util_2.storeSignerType)(signerType);\n                    this.emit('connect', { chainId: (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id)) });\n                    return accounts;\n                }\n                catch (error) {\n                    this.handleUnauthorizedError(error);\n                    throw error;\n                }\n            },\n            sign: async (request) => {\n                if (!this.connected || !this.signer) {\n                    throw error_1.standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n                }\n                try {\n                    return await this.signer.request(request);\n                }\n                catch (error) {\n                    this.handleUnauthorizedError(error);\n                    throw error;\n                }\n            },\n            fetch: (request) => (0, provider_1.fetchRPCRequest)(request, this.chain),\n            state: (request) => {\n                const getConnectedAccounts = () => {\n                    if (this.connected)\n                        return this.accounts;\n                    throw error_1.standardErrors.provider.unauthorized(\"Must call 'eth_requestAccounts' before other methods\");\n                };\n                switch (request.method) {\n                    case 'eth_chainId':\n                        return (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(this.chain.id));\n                    case 'net_version':\n                        return this.chain.id;\n                    case 'eth_accounts':\n                        return getConnectedAccounts();\n                    case 'eth_coinbase':\n                        return getConnectedAccounts()[0];\n                    default:\n                        return this.handlers.unsupported(request);\n                }\n            },\n            deprecated: ({ method }) => {\n                throw error_1.standardErrors.rpc.methodNotSupported(`Method ${method} is deprecated.`);\n            },\n            unsupported: ({ method }) => {\n                throw error_1.standardErrors.rpc.methodNotSupported(`Method ${method} is not supported.`);\n            },\n        };\n        this.isCoinbaseWallet = true;\n        this.updateListener = {\n            onAccountsUpdate: ({ accounts, source }) => {\n                if ((0, util_1.areAddressArraysEqual)(this.accounts, accounts))\n                    return;\n                this.accounts = accounts;\n                if (source === 'storage')\n                    return;\n                this.emit('accountsChanged', this.accounts);\n            },\n            onChainUpdate: ({ chain, source }) => {\n                if (chain.id === this.chain.id && chain.rpcUrl === this.chain.rpcUrl)\n                    return;\n                this.chain = chain;\n                if (source === 'storage')\n                    return;\n                this.emit('chainChanged', (0, util_1.hexStringFromIntNumber)((0, type_1.IntNumber)(chain.id)));\n            },\n        };\n        this.metadata = metadata;\n        this.preference = preference;\n        this.communicator = new Communicator_1.Communicator(keysUrl);\n        this.chain = {\n            id: (_c = (_b = metadata.appChainIds) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : 1,\n        };\n        // Load states from storage\n        const signerType = (0, util_2.loadSignerType)();\n        this.signer = signerType ? this.initSigner(signerType) : null;\n    }\n    get connected() {\n        return this.accounts.length > 0;\n    }\n    async request(args) {\n        var _a;\n        try {\n            const invalidArgsError = (0, provider_1.checkErrorForInvalidRequestArgs)(args);\n            if (invalidArgsError)\n                throw invalidArgsError;\n            // unrecognized methods are treated as fetch requests\n            const category = (_a = (0, method_1.determineMethodCategory)(args.method)) !== null && _a !== void 0 ? _a : 'fetch';\n            return this.handlers[category](args);\n        }\n        catch (error) {\n            return Promise.reject((0, serialize_1.serializeError)(error, args.method));\n        }\n    }\n    handleUnauthorizedError(error) {\n        const e = error;\n        if (e.code === error_1.standardErrorCodes.provider.unauthorized)\n            this.disconnect();\n    }\n    /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */\n    async enable() {\n        console.warn(`.enable() has been deprecated. Please use .request({ method: \"eth_requestAccounts\" }) instead.`);\n        return await this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n    async disconnect() {\n        this.accounts = [];\n        this.chain = { id: 1 };\n        ScopedLocalStorage_1.ScopedLocalStorage.clearAll();\n        this.emit('disconnect', error_1.standardErrors.provider.disconnected('User initiated disconnection'));\n    }\n    requestSignerSelection() {\n        return (0, util_2.fetchSignerType)({\n            communicator: this.communicator,\n            preference: this.preference,\n            metadata: this.metadata,\n        });\n    }\n    initSigner(signerType) {\n        return (0, util_2.createSigner)({\n            signerType,\n            metadata: this.metadata,\n            communicator: this.communicator,\n            updateListener: this.updateListener,\n        });\n    }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}