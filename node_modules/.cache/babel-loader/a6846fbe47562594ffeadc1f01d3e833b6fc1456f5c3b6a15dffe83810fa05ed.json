{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Communicator = void 0;\nconst version_1 = require(\"../../version\");\nconst util_1 = require(\"./util\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\n/**\n * Communicates with a popup window for Coinbase keys.coinbase.com (or another url)\n * to send and receive messages.\n *\n * This class is responsible for opening a popup window, posting messages to it,\n * and listening for responses.\n *\n * It also handles cleanup of event listeners and the popup window itself when necessary.\n */\nclass Communicator {\n  constructor() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : constants_1.CB_KEYS_URL;\n    this.popup = null;\n    this.listeners = new Map();\n    /**\n     * Posts a message to the popup window\n     */\n    this.postMessage = async message => {\n      const popup = await this.waitForPopupLoaded();\n      popup.postMessage(message, this.url.origin);\n    };\n    /**\n     * Posts a request to the popup window and waits for a response\n     */\n    this.postRequestAndWaitForResponse = async request => {\n      const responsePromise = this.onMessage(_ref => {\n        let {\n          requestId\n        } = _ref;\n        return requestId === request.id;\n      });\n      this.postMessage(request);\n      return await responsePromise;\n    };\n    /**\n     * Listens for messages from the popup window that match a given predicate.\n     */\n    this.onMessage = async predicate => {\n      return new Promise((resolve, reject) => {\n        const listener = event => {\n          if (event.origin !== this.url.origin) return; // origin validation\n          const message = event.data;\n          if (predicate(message)) {\n            resolve(message);\n            window.removeEventListener('message', listener);\n            this.listeners.delete(listener);\n          }\n        };\n        window.addEventListener('message', listener);\n        this.listeners.set(listener, {\n          reject\n        });\n      });\n    };\n    /**\n     * Closes the popup, rejects all requests and clears the listeners\n     */\n    this.disconnect = () => {\n      (0, util_1.closePopup)(this.popup);\n      this.popup = null;\n      this.listeners.forEach((_ref2, listener) => {\n        let {\n          reject\n        } = _ref2;\n        reject(error_1.standardErrors.provider.userRejectedRequest('Request rejected'));\n        window.removeEventListener('message', listener);\n      });\n      this.listeners.clear();\n    };\n    /**\n     * Waits for the popup window to fully load and then sends a version message.\n     */\n    this.waitForPopupLoaded = async () => {\n      if (this.popup && !this.popup.closed) return this.popup;\n      this.popup = (0, util_1.openPopup)(this.url);\n      this.onMessage(_ref3 => {\n        let {\n          event\n        } = _ref3;\n        return event === 'PopupUnload';\n      }).then(this.disconnect).catch(() => {});\n      return this.onMessage(_ref4 => {\n        let {\n          event\n        } = _ref4;\n        return event === 'PopupLoaded';\n      }).then(message => {\n        this.postMessage({\n          requestId: message.id,\n          data: {\n            version: version_1.LIB_VERSION\n          }\n        });\n      }).then(() => {\n        if (!this.popup) throw error_1.standardErrors.rpc.internal();\n        return this.popup;\n      });\n    };\n    this.url = new URL(url);\n  }\n}\nexports.Communicator = Communicator;","map":{"version":3,"names":["Object","defineProperty","exports","value","Communicator","version_1","require","util_1","constants_1","error_1","constructor","url","arguments","length","undefined","CB_KEYS_URL","popup","listeners","Map","postMessage","message","waitForPopupLoaded","origin","postRequestAndWaitForResponse","request","responsePromise","onMessage","_ref","requestId","id","predicate","Promise","resolve","reject","listener","event","data","window","removeEventListener","delete","addEventListener","set","disconnect","closePopup","forEach","_ref2","standardErrors","provider","userRejectedRequest","clear","closed","openPopup","_ref3","then","catch","_ref4","version","LIB_VERSION","rpc","internal","URL"],"sources":["/Users/shardingdog/billingdog/node_modules/@coinbase/wallet-sdk/dist/core/communicator/Communicator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Communicator = void 0;\nconst version_1 = require(\"../../version\");\nconst util_1 = require(\"./util\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\n/**\n * Communicates with a popup window for Coinbase keys.coinbase.com (or another url)\n * to send and receive messages.\n *\n * This class is responsible for opening a popup window, posting messages to it,\n * and listening for responses.\n *\n * It also handles cleanup of event listeners and the popup window itself when necessary.\n */\nclass Communicator {\n    constructor(url = constants_1.CB_KEYS_URL) {\n        this.popup = null;\n        this.listeners = new Map();\n        /**\n         * Posts a message to the popup window\n         */\n        this.postMessage = async (message) => {\n            const popup = await this.waitForPopupLoaded();\n            popup.postMessage(message, this.url.origin);\n        };\n        /**\n         * Posts a request to the popup window and waits for a response\n         */\n        this.postRequestAndWaitForResponse = async (request) => {\n            const responsePromise = this.onMessage(({ requestId }) => requestId === request.id);\n            this.postMessage(request);\n            return await responsePromise;\n        };\n        /**\n         * Listens for messages from the popup window that match a given predicate.\n         */\n        this.onMessage = async (predicate) => {\n            return new Promise((resolve, reject) => {\n                const listener = (event) => {\n                    if (event.origin !== this.url.origin)\n                        return; // origin validation\n                    const message = event.data;\n                    if (predicate(message)) {\n                        resolve(message);\n                        window.removeEventListener('message', listener);\n                        this.listeners.delete(listener);\n                    }\n                };\n                window.addEventListener('message', listener);\n                this.listeners.set(listener, { reject });\n            });\n        };\n        /**\n         * Closes the popup, rejects all requests and clears the listeners\n         */\n        this.disconnect = () => {\n            (0, util_1.closePopup)(this.popup);\n            this.popup = null;\n            this.listeners.forEach(({ reject }, listener) => {\n                reject(error_1.standardErrors.provider.userRejectedRequest('Request rejected'));\n                window.removeEventListener('message', listener);\n            });\n            this.listeners.clear();\n        };\n        /**\n         * Waits for the popup window to fully load and then sends a version message.\n         */\n        this.waitForPopupLoaded = async () => {\n            if (this.popup && !this.popup.closed)\n                return this.popup;\n            this.popup = (0, util_1.openPopup)(this.url);\n            this.onMessage(({ event }) => event === 'PopupUnload')\n                .then(this.disconnect)\n                .catch(() => { });\n            return this.onMessage(({ event }) => event === 'PopupLoaded')\n                .then((message) => {\n                this.postMessage({\n                    requestId: message.id,\n                    data: { version: version_1.LIB_VERSION },\n                });\n            })\n                .then(() => {\n                if (!this.popup)\n                    throw error_1.standardErrors.rpc.internal();\n                return this.popup;\n            });\n        };\n        this.url = new URL(url);\n    }\n}\nexports.Communicator = Communicator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}