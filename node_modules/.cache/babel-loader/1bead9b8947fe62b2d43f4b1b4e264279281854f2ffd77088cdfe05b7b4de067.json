{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSigner = exports.fetchSignerType = exports.storeSignerType = exports.loadSignerType = void 0;\nconst SCWSigner_1 = require(\"./scw/SCWSigner\");\nconst WalletLinkSigner_1 = require(\"./walletlink/WalletLinkSigner\");\nconst error_1 = require(\"../core/error\");\nconst provider_1 = require(\"../util/provider\");\nconst ScopedLocalStorage_1 = require(\"../util/ScopedLocalStorage\");\nconst SIGNER_TYPE_KEY = 'SignerType';\nconst storage = new ScopedLocalStorage_1.ScopedLocalStorage('CBWSDK', 'SignerConfigurator');\nfunction loadSignerType() {\n  return storage.getItem(SIGNER_TYPE_KEY);\n}\nexports.loadSignerType = loadSignerType;\nfunction storeSignerType(signerType) {\n  storage.setItem(SIGNER_TYPE_KEY, signerType);\n}\nexports.storeSignerType = storeSignerType;\nasync function fetchSignerType(params) {\n  const {\n    communicator,\n    metadata\n  } = params;\n  listenForWalletLinkSessionRequest(communicator, metadata).catch(() => {});\n  const request = {\n    id: crypto.randomUUID(),\n    event: 'selectSignerType',\n    data: params.preference\n  };\n  const {\n    data\n  } = await communicator.postRequestAndWaitForResponse(request);\n  return data;\n}\nexports.fetchSignerType = fetchSignerType;\nfunction createSigner(params) {\n  const {\n    signerType,\n    metadata,\n    communicator,\n    updateListener\n  } = params;\n  switch (signerType) {\n    case 'scw':\n      return new SCWSigner_1.SCWSigner({\n        metadata,\n        updateListener,\n        communicator\n      });\n    case 'walletlink':\n      return new WalletLinkSigner_1.WalletLinkSigner({\n        metadata,\n        updateListener\n      });\n    case 'extension':\n      {\n        const injectedSigner = (0, provider_1.getCoinbaseInjectedSigner)();\n        if (!injectedSigner) {\n          throw error_1.standardErrors.rpc.internal('injected signer not found');\n        }\n        return injectedSigner;\n      }\n  }\n}\nexports.createSigner = createSigner;\nasync function listenForWalletLinkSessionRequest(communicator, metadata) {\n  await communicator.onMessage(({\n    event\n  }) => event === 'WalletLinkSessionRequest');\n  // temporary walletlink signer instance to handle WalletLinkSessionRequest\n  // will revisit this when refactoring the walletlink signer\n  const walletlink = new WalletLinkSigner_1.WalletLinkSigner({\n    metadata\n  });\n  // send wallet link session to popup\n  communicator.postMessage({\n    event: 'WalletLinkUpdate',\n    data: {\n      session: walletlink.getSession()\n    }\n  });\n  // wait for handshake to complete\n  await walletlink.handshake();\n  // send connected status to popup\n  communicator.postMessage({\n    event: 'WalletLinkUpdate',\n    data: {\n      connected: true\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSigner","fetchSignerType","storeSignerType","loadSignerType","SCWSigner_1","require","WalletLinkSigner_1","error_1","provider_1","ScopedLocalStorage_1","SIGNER_TYPE_KEY","storage","ScopedLocalStorage","getItem","signerType","setItem","params","communicator","metadata","listenForWalletLinkSessionRequest","catch","request","id","crypto","randomUUID","event","data","preference","postRequestAndWaitForResponse","updateListener","SCWSigner","WalletLinkSigner","injectedSigner","getCoinbaseInjectedSigner","standardErrors","rpc","internal","onMessage","walletlink","postMessage","session","getSession","handshake","connected"],"sources":["/Users/shardingdog/billingdog/node_modules/@coinbase/wallet-sdk/dist/sign/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSigner = exports.fetchSignerType = exports.storeSignerType = exports.loadSignerType = void 0;\nconst SCWSigner_1 = require(\"./scw/SCWSigner\");\nconst WalletLinkSigner_1 = require(\"./walletlink/WalletLinkSigner\");\nconst error_1 = require(\"../core/error\");\nconst provider_1 = require(\"../util/provider\");\nconst ScopedLocalStorage_1 = require(\"../util/ScopedLocalStorage\");\nconst SIGNER_TYPE_KEY = 'SignerType';\nconst storage = new ScopedLocalStorage_1.ScopedLocalStorage('CBWSDK', 'SignerConfigurator');\nfunction loadSignerType() {\n    return storage.getItem(SIGNER_TYPE_KEY);\n}\nexports.loadSignerType = loadSignerType;\nfunction storeSignerType(signerType) {\n    storage.setItem(SIGNER_TYPE_KEY, signerType);\n}\nexports.storeSignerType = storeSignerType;\nasync function fetchSignerType(params) {\n    const { communicator, metadata } = params;\n    listenForWalletLinkSessionRequest(communicator, metadata).catch(() => { });\n    const request = {\n        id: crypto.randomUUID(),\n        event: 'selectSignerType',\n        data: params.preference,\n    };\n    const { data } = await communicator.postRequestAndWaitForResponse(request);\n    return data;\n}\nexports.fetchSignerType = fetchSignerType;\nfunction createSigner(params) {\n    const { signerType, metadata, communicator, updateListener } = params;\n    switch (signerType) {\n        case 'scw':\n            return new SCWSigner_1.SCWSigner({\n                metadata,\n                updateListener,\n                communicator,\n            });\n        case 'walletlink':\n            return new WalletLinkSigner_1.WalletLinkSigner({\n                metadata,\n                updateListener,\n            });\n        case 'extension': {\n            const injectedSigner = (0, provider_1.getCoinbaseInjectedSigner)();\n            if (!injectedSigner) {\n                throw error_1.standardErrors.rpc.internal('injected signer not found');\n            }\n            return injectedSigner;\n        }\n    }\n}\nexports.createSigner = createSigner;\nasync function listenForWalletLinkSessionRequest(communicator, metadata) {\n    await communicator.onMessage(({ event }) => event === 'WalletLinkSessionRequest');\n    // temporary walletlink signer instance to handle WalletLinkSessionRequest\n    // will revisit this when refactoring the walletlink signer\n    const walletlink = new WalletLinkSigner_1.WalletLinkSigner({\n        metadata,\n    });\n    // send wallet link session to popup\n    communicator.postMessage({\n        event: 'WalletLinkUpdate',\n        data: { session: walletlink.getSession() },\n    });\n    // wait for handshake to complete\n    await walletlink.handshake();\n    // send connected status to popup\n    communicator.postMessage({\n        event: 'WalletLinkUpdate',\n        data: { connected: true },\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}